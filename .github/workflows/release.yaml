name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  id-token: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Get version from tag
        id: get-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.get-version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format. Expected: x.y.z"
            exit 1
          fi

      - name: Check version matches package.json
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$PACKAGE_VERSION" != "${{ steps.get-version.outputs.version }}" ]; then
            echo "‚ùå Version mismatch: package.json($PACKAGE_VERSION) != tag(${{ steps.get-version.outputs.version }})"
            exit 1
          fi
          echo "‚úì Version matches package.json"

      - name: Install dependencies
        run: npm ci --only=production

      - name: Run full test suite
        run: npm test

      - name: Validate database
        run: |
          node -e "
          const db = require('./src/phone-database.json');
          if (db.metadata.version !== '${{ steps.get-version.outputs.version }}') {
            throw new Error('Database version does not match release version');
          }
          console.log('‚úì Database version matches release version');
          "

  test-package:
    name: Test Package Build
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --only=production

      - name: Test package creation
        run: |
          npm pack
          tar -tzf phone-forge-${{ needs.validate.outputs.version }}.tgz

      - name: Test package installation
        run: |
          mkdir test-install
          cd test-install
          npm init -y
          npm install ../phone-forge-${{ needs.validate.outputs.version }}.tgz

          # Test basic functionality
          node -e "
          const pf = require('phone-forge');
          console.log('Testing formatPhoneNumber...');
          console.log(pf.formatPhoneNumber('2128691246'));
          console.log('Testing phoneUtils...');
          console.log(pf.phoneUtils.getCountryByISO2('US'));
          console.log('‚úì Package installation and basic functionality test passed');
          "

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: phone-forge-${{ needs.validate.outputs.version }}.tgz
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, test-package]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Fetch all history for changelog

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-package

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "## üéâ Initial Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the first release of Phone Forge!" >> CHANGELOG.md
          else
            echo "## üìã Changes from $PREVIOUS_TAG to v${{ needs.validate.outputs.version }}" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Get commit messages between tags
            git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          fi

          echo "" >> CHANGELOG.md
          echo "## üìä Package Information" >> CHANGELOG.md
          echo "- **Version**: ${{ needs.validate.outputs.version }}" >> CHANGELOG.md
          echo "- **Node.js Compatibility**: 16.x, 18.x, 20.x, 22.x" >> CHANGELOG.md
          echo "- **Countries Supported**: $(node -p "require('./src/phone-database.json').countries.length")" >> CHANGELOG.md
          echo "- **Database Version**: $(node -p "require('./src/phone-database.json').metadata.version")" >> CHANGELOG.md

          # Set output for release body
          {
            echo 'changelog<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Phone Forge v${{ needs.validate.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: phone-forge-${{ needs.validate.outputs.version }}.tgz
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, test-package, create-release]
    environment: npm-publish # Use environment protection

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --only=production

      - name: Configure npm
        run: |
          npm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
          npm whoami

      - name: Publish to NPM
        run: |
          # Check if version already exists
          if npm view phone-forge@${{ needs.validate.outputs.version }} version 2>/dev/null; then
            echo "‚ùå Version ${{ needs.validate.outputs.version }} already exists on NPM"
            exit 1
          fi

          # Publish package
          npm publish --access public

          echo "‚úÖ Successfully published phone-forge@${{ needs.validate.outputs.version }} to NPM"

      - name: Verify publication
        run: |
          # Wait a moment for NPM to update
          sleep 10

          # Verify the package is available
          npm view phone-forge@${{ needs.validate.outputs.version }}

          # Test installation from NPM
          mkdir verify-install
          cd verify-install
          npm init -y
          npm install phone-forge@${{ needs.validate.outputs.version }}

          node -e "
          const pf = require('phone-forge');
          console.log('‚úì NPM package verification successful');
          console.log('Version:', require('phone-forge/package.json').version);
          "

  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [validate, create-release, publish-npm]
    if: always()

    steps:
      - name: Release Success Notification
        if: needs.publish-npm.result == 'success'
        run: |
          echo "üéâ Phone Forge v${{ needs.validate.outputs.version }} successfully released!"
          echo "üì¶ NPM: https://www.npmjs.com/package/phone-forge"
          echo "üîó GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}"

      - name: Release Failure Notification
        if: needs.publish-npm.result == 'failure' || needs.create-release.result == 'failure'
        run: |
          echo "‚ùå Release failed for Phone Forge v${{ needs.validate.outputs.version }}"
          echo "Check the logs for details."
          exit 1
