name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test on Node.js ${{ matrix.node-version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x, 22.x]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --only=production

      - name: Run tests
        run: npm test

      - name: Test package installation
        run: |
          npm pack
          npm install ./phone-forge-*.tgz
          node -e "const pf = require('phone-forge'); console.log('✓ Package loads successfully'); console.log(pf.formatPhoneNumber('2128691246'));"

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --only=production

      - name: Check TypeScript definitions
        run: |
          npx tsc --noEmit --allowJs src/index.d.ts || echo "TypeScript check completed"

      - name: Validate package.json
        run: npm run test --if-present

      - name: Check for sensitive files
        run: |
          if [ -f ".env" ] || [ -f "*.key" ] || [ -f "*.pem" ]; then
            echo "❌ Sensitive files detected"
            exit 1
          else
            echo "✓ No sensitive files found"
          fi

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --only=production

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: |
          if npm audit --audit-level=high --json | grep -q '"high":\s*[1-9]'; then
            echo "❌ High severity vulnerabilities found"
            exit 1
          else
            echo "✓ No high severity vulnerabilities"
          fi

  validate-database:
    name: Validate Phone Database
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Validate JSON structure
        run: |
          node -e "
          const db = require('./src/phone-database.json');

          // Validate metadata
          if (!db.metadata || !db.metadata.version || !db.countries) {
            throw new Error('Invalid database structure');
          }

          // Validate countries array
          if (!Array.isArray(db.countries) || db.countries.length === 0) {
            throw new Error('Countries array is invalid');
          }

          // Validate each country
          const requiredFields = ['name', 'iso2', 'iso3', 'dialCode', 'flag'];
          db.countries.forEach((country, index) => {
            requiredFields.forEach(field => {
              if (!country[field]) {
                throw new Error(\`Country at index \${index} missing field: \${field}\`);
              }
            });
            
            // Validate ISO2 format
            if (!/^[A-Z]{2}$/.test(country.iso2)) {
              throw new Error(\`Invalid ISO2 code: \${country.iso2}\`);
            }
            
            // Validate ISO3 format
            if (!/^[A-Z]{3}$/.test(country.iso3)) {
              throw new Error(\`Invalid ISO3 code: \${country.iso3}\`);
            }
            
            // Validate dial code format
            if (!/^\+\d{1,4}$/.test(country.dialCode)) {
              throw new Error(\`Invalid dial code: \${country.dialCode}\`);
            }
          });

          console.log(\`✓ Database validated: \${db.countries.length} countries\`);
          "

      - name: Check for duplicates
        run: |
          node -e "
          const db = require('./src/phone-database.json');

          // Check for duplicate ISO2 codes
          const iso2Codes = db.countries.map(c => c.iso2);
          const uniqueISO2 = new Set(iso2Codes);
          if (iso2Codes.length !== uniqueISO2.size) {
            throw new Error('Duplicate ISO2 codes found');
          }

          // Check for duplicate ISO3 codes
          const iso3Codes = db.countries.map(c => c.iso3);
          const uniqueISO3 = new Set(iso3Codes);
          if (iso3Codes.length !== uniqueISO3.size) {
            throw new Error('Duplicate ISO3 codes found');
          }

          console.log('✓ No duplicate country codes found');
          "
